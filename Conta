import java.math.BigDecimal;

public class Conta {

    private Enum<TipoConta> tipoConta;
    protected Long numeroConta;
    protected Integer agencia;
    protected BigDecimal saldo;

    public Conta(Enum<TipoConta> tipoConta, Long numeroConta, Integer agencia, BigDecimal saldo) {
        this.numeroConta = numeroConta;
        this.agencia = agencia;
        this.saldo = BigDecimal.ZERO;
    }

    public Conta(Long numeroConta, Integer agencia) {
        this.numeroConta = numeroConta;
        this.agencia = agencia;
        this.saldo = BigDecimal.ZERO;
    }

    public Conta(TipoConta contaCorrente, long numeroConta, int agencia, BigDecimal saldo) {
    }


    public Long getNumeroConta() {

        return this.numeroConta;
    }

    public void setNumeroConta(Long numeroConta) {
        this.numeroConta = numeroConta;
    }

    public Integer getAgencia() {

        return this.agencia;
    }

    public void setAgencia(Integer agencia){

        this.agencia = agencia;
    }

    public BigDecimal getSaldo() {

        return this.saldo;
    }

    public void setSaldo(BigDecimal saldo){
        this.saldo = saldo;

    }

    public BigDecimal deposita(BigDecimal valor) {
        this.saldo = this.saldo.add(valor);
        return this.saldo;
    }

    public BigDecimal saque(BigDecimal valor) {
        this.saldo = this.saldo.subtract(valor);
        return this.saldo;
    }

    public BigDecimal transferir(BigDecimal valor, Conta destino) {
        BigDecimal saldoAtualizadoDaContaOrigem = saque(valor);
        destino.deposita(valor);
        return saldoAtualizadoDaContaOrigem;
    }


    public void mostrarSaldo(){
        System.out.println("Seu saldo Ã© de: R$" + this.saldo);
    }

    public BigDecimal sacar(BigDecimal valor){
        if (this.saldo != null && this.saldo.compareTo(valor) >= 0) {
            this.saldo = this.saldo.subtract(valor);
        } else {
            System.out.println("Saldo insulficiente");
        }
        return this.saldo;
    }

    public BigDecimal depositar(BigDecimal valor) {
        if (this.saldo != null) {
            this.saldo = this.saldo.add(valor);
        } else {
            this.saldo = valor;
        }
        return this.saldo;
    }

    public Conta criarConta(Enum<TipoConta> tipoContaEnum, Long numConta, int agencia, BigDecimal saldo) {

        Conta conta = new Conta(TipoConta.CONTA_CORRENTE, 1230L, 0001, BigDecimal.valueOf(10000));
        conta.tipoConta = tipoContaEnum;
        conta.numeroConta = numConta;
        conta.agencia = agencia;
        conta.saldo = BigDecimal.ZERO;
        return conta;

    }
}
